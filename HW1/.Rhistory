#Homework1 201503564 한민지
help.start()
y <- rnorm(x) #Generate two pseudo-random normal vectors of x- and y-coordinates.
help(rnorm)
x
y <- rnorm(x)
search()
ls()
x <- 1:20
library("ggplot")
#library("ggplot")
#20190327 실습
?mpg
install.packages('ggplot2')
library('ggplot2')
?mpg
str(mpg)
#base package를 이용한 mpg그래프 작성
hist(mpg$hwy, breaks=15)
boxplot(mpg$hwy)
boxplot(mpg$hwy~mpg$drv)
plot(mpg$displ~mpg$hwy)
x1
#base package를 이용한 mpg그래프 작성
hist(mpg$hwy, breaks=15)
x1
##################################
x1 <- c(1,2,5,3,6,-2,4)
x2
x2 <- c("one", "two", "three")
x2
x1
x3 <- c(TRUE, TRUE, FALSE, FALSE )
x3
8 <- ewp(1:3, 2)
x8 <- ewp(1:3, 2)
x8 <- rep(1:3, 2)
x8
y1 <- c(1,2,"one")
y1
y2
y2 <- (TRUE, FALSE, 2)
y2
y2 <- (TRUE, FALSE, 2)
y2 <- (TRUE, FALSE, 2)
y2 <- (TRUE,FALSE,2)
y2 <- (TRUE, FALSE, 2)
y2 <- (TRUE, FALSE, 2)
y2 <- c(TRUE, FALSE, 2)
y2
mode(x1)
mode(x2)
length(x1)
length(x2)
m4 <- matrix(1:10, nrow=2)
m4
m4[1,4]
m4[2,]
m4[,2]
m4[1, c(3,4)]
m4[1, -c(1,2,3)]
m4[3]
m2 + 2
m2 <- matrix(cell, nrow=2, ncol=2, byrow=TRUE, dimnames = (rname, cname) )
m2 <- matrix(cell, nrow=2, ncol=2, byrow=TRUE, dimnames = list(rname, cname) )
cell <- c(1,26,24,68)
cname <- c("c1", "C2")
m2 <- matrix(cell, nrow=2, ncol=2, byrow=TRUE, dimnames = list(rname, cname) )
rname <- c("r1", "r2")
cname <- c("c1", "C2")
m2 <- matrix(cell, nrow=2, ncol=2, byrow=TRUE, dimnames = list(rname, cname) )
m2
list1 <- list(1, "a", TRUE, 1+4i)
list1
g <- "My First List"
h <- c(25, 26,18, 39)
j <- matrix(1:10, nrow=5)
k <- list("a list within a list", h)
mylist <- list(title=g, ages=h, j, k)
mylist
mylist[2]
mylist[[2]]
mylist$age
mylist[[4]][[2]][2]
mylist[[3]][c(2,3)]
mylist[[3]]
####data frame####
patientID <- c(1,2,3,4)
age <- c(25,34,28,52)
diabetes <- c("Type1", "Type2", "Type3", "Type4")
status <- c("Poor","Improved", "Excellent","Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
str(patientdata)
summary(patientdata)
patientdata
patient[1,2]
patientdata[1,2]
paientdata[1:2]
patientdata[1:2]
patientdata[1:2,]
patientdata[,1:2]
patientdata[c("diabetes", "status")]
patientdata$age
patientdata["age"]
x <- rnorm(50) #Generate two pseudo-random normal vectors of x- and y-coordinates.
y <- rnorm(x) #x를 못찾음
y <- rnorm(x)
#그래픽 관련한 함수
#plot(y축 데이터 옵션), plot(x축 데이터 옵션, y축 데이터 옵션)
plot(x,y)
ls()
#저장되어있는 변수 및 오브젝트 지우기
rm(x,y)
x <- 1:20
w <- 1 + sqrt(x)/2
#sqrt(x) = x의 제곱근, 벡터로 저장
w <- 1 + sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
#le
fm1 <- lm(y ~ x, data=dummy)
summary(fm1)
#attach
attach(dummy)
#lm()- linear model(선형회귀 만들기)
#lm(formula, data)
#summary - 각 variable에 대한 요약된 데이터 정보 보기
fm <- lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
#attach
attach(dummy)
#lowess : 지역 가중 다항식 회귀,  각 점을 그 주변 점들로 설명하는 다항식들이 연결된 모양
lrf <- lowess(x, y)
View(dummy)
#lowess : 지역 가중 다항식 회귀,  각 점을 그 주변 점들로 설명하는 다항식들이 연결된 모양
lrf <- lowess(x, y)
plot(x,y)
lines(x, lrf$y)
#abline(x절편기울기, y절편 기울기, y값을 지나가는 수평인 직선, x값을 지나가는 수직인 직선 ,
# 회귀 직선 추가, 절편과 기울기로 이루어진 직선 ..)
abline(0, 1, lty=3)
plot(x,y)
#ines(x, y = NULL, type = "l", ...)
lines(x, lrf$y)
#abline(x절편기울기, y절편 기울기, y값을 지나가는 수평인 직선, x값을 지나가는 수직인 직선 ,
# 회귀 직선 추가, 절편과 기울기로 이루어진 직선 ..)
abline(0, 1, lty=3)
abline(coef(fm))
abline(coef(fm1), col="red")
detach()
plot(fitted(fm), resid(fm),
xlab="Fitted values",
ylab="Residuals",
main="Residuals vs Fitted")
View(fm)
qqnorm(resid(fm), main="Residuals Rankit Plot")
rm(fm, rm1, lrf, x, dummy)
filepath <- system.file("data", "morley.tab", package="datasets")
filepath
mm <- read.table(filepath)
mm
mm$Expt <- factor(mm$Expt)
View(mm)
mm$Expt <- factor(mm$Expt)
mm$Run <- factor(mm$Run)
attach(mm)
plot(Expt, Speed, main="Speed of Light Data", xlab="Experiment No.")
fm <- aov(Speed ~ Run + Expt, data=mm)
summary(fm)
fm0 <- update(fm, . ~ . - Run)
anova(fm0, fm)
detach()
rm(fm, fm0)
x <- seq(-pi, pi, len=50)
y <- x
f <- outer(x, y, function(x,y) cos(y)/(1+x^2))
View(f)
View(f)
oldpar <- par(no.readonly = TRUE)
par(pty="s")
image(x,y,f)
image(x,y,fa)
contour(x,y,f)
contour(x,y,f,nlevels=15, add=TRUE)
fa <- (f-t(f))/2
contour(x,y,fa,nlevels=15)
par(oldpar)
image(x,y,f)
image(x,y,fa)
objects(); rm(x,y,f,fa)
th <- seq(-pi, pi, len=100)
z <- exp(1i*th)
par(pty="s")
plot(z, type="l")
w <- rnorm(100) + rnorm(100)*1i
w <- ifelse(Mod(w) > 1, 1/w, w)
plot(w, xlim=c(-1,1), ylim=c(-1,1), pch="+",xlab="x", ylab="y")
#ifelse() : 주어진 test 값에 따라 yes 또는 no 값을 반환한다
#mod() == %% (몫)
w <- ifelse(Mod(w) > 1, 1/w, w)
plot(w, xlim=c(-1,1), ylim=c(-1,1), pch="+",xlab="x", ylab="y")
lines(z)
w <- sqrt(runif(100))*exp(2*pi*runif(100)*1i)
plot(w, xlim=c(-1,1), ylim=c(-1,1), pch="+", xlab="x", ylab="y")
lines(z)
rm(th, w, z)
q()
